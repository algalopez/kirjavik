plugins {
    id 'java'
    id 'io.quarkus'
    id 'org.sonarqube' version "6.2.0.5505"
    id 'jacoco'
}

group = 'com.algalopez'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform()
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    finalizedBy jacocoTestReport
    jacoco {
        enabled = true
        excludeClassLoaders = ["*QuarkusClassLoader"]
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jacocoTestReport {
    dependsOn test
    executionData file("${projectDir}/build/jacoco-quarkus.exec")
    reports {
        xml.required = true
        html.required = true
    }
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation enforcedPlatform("${quarkusPlatformGroupId}:quarkus-cxf-bom:${quarkusPlatformVersion}")
    implementation 'io.quarkiverse.cxf:quarkus-cxf'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation("io.quarkus:quarkus-hibernate-orm")
    implementation 'io.quarkus:quarkus-jdbc-mariadb'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'org.mapstruct:mapstruct:1.6.3'

    compileOnly 'org.projectlombok:lombok:1.18.38'

    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.quarkus:quarkus-jacoco'
    testImplementation 'io.rest-assured:rest-assured:5.5.2'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation 'net.datafaker:datafaker:2.4.3'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'

    testCompileOnly 'org.projectlombok:lombok:1.18.38'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
}

sonar {
    properties {
        property 'sonar.projectKey', 'com.algalopez.kirjavik'
        property 'sonar.projectName', 'Kirjavik'
        property 'sonar.projectVersion', version
        property 'sonar.language', 'java'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '**/Application.java'
        property 'sonar.coverage.exclusions', '**/Application.java'
        property 'sonar.host.url', 'http://localhost:34601'
        property 'sonar.token', 'sqa_6bc8ab6d2ee2006ac37d0fd80749a2c8597e4d1c'
        property "sonar.coverage.jacoco.xmlReportPaths", "${projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

def createFlywayTask(String taskName, String command, String contextDir, String descriptionText) {
    tasks.register(taskName, Exec) {
        group = 'Database'
        description = descriptionText
        commandLine 'docker', 'run', '--rm',
                '-v', "${projectDir}/database:/database",
                '--network', 'kirjavik_network',
                'flyway/flyway:11.8.1-alpine',
                "-configFiles=/database/${contextDir}/conf/flyway-${contextDir}.conf",
                command
    }
}

createFlywayTask('migrateBackoffice', 'migrate', 'backoffice', 'Migrate backoffice')
createFlywayTask('migrateKirjavik', 'migrate', 'kirjavik', 'Migrate kirjavik')
createFlywayTask('migrateStats', 'migrate', 'stats', 'Migrate stats')
